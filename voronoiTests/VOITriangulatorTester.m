//
//  VOITriangulatorTester.m
//  voronoiTests
//
//  Created by Brent Gulanowski on 2018-10-06.
//  Copyright Â© 2018 Lichen Labs. All rights reserved.
//

#import <XCTest/XCTest.h>

#import "VOIPointList.h"
#import "VOITriangle.h"
#import "VOITriangleList.h"
#import "VOITriangulator.h"

@interface VOITriangulatorTester : XCTestCase
@property VOITriangulator *triangulator;
@end

#define COUNT 9

static VOIPoint points[COUNT];

@implementation VOITriangulatorTester

+ (void)setUp {
    [super setUp];
    NSUInteger i = 0;
    points[i++] = vector2(  23.0, 264.0);
    points[i++] = vector2( 139.0, 117.0);
    points[i++] = vector2( 858.0, 323.0);
    points[i++] = vector2( 950.0, 747.0);
    points[i++] = vector2(1088.0, 734.0);
    points[i++] = vector2(1023.0, 166.0);
    points[i++] = vector2( 352.0, 413.0);
    points[i++] = vector2( 275.0, 721.0);
    points[i++] = vector2(1197.0, 160.0);
    NSAssert(i == COUNT, @"Inconsistent start data");
}

- (void)setUp {
    [super setUp];
    VOIPointList *pl = [[VOIPointList alloc] initWithPoints:points count:COUNT];
    self.triangulator = [[VOITriangulator alloc] initWithPointList:pl];
}

- (void)testTriangulate {
#define TRI_COUNT 10
    // This list is generated by the old triangulation code
    // (see -[NSArray(Voronoi) triangulation]), and points
    // from VoronoiDemo Document class, with random seed 88.
    VOIPoint triangles[TRI_COUNT][3] = {
        { points[0], points[6], points[1] },
        { points[7], points[6], points[0] },
        { points[6], points[3], points[2] },
        { points[2], points[1], points[6] },
        { points[5], points[1], points[2] },
        { points[6], points[7], points[3] },
        { points[2], points[3], points[4] },
        { points[2], points[8], points[5] },
        { points[2], points[4], points[8] },
        { points[0], points[1], points[6] }
    };
    VOITriangleList *e = [[VOITriangleList alloc] initWithPoints:&triangles[0][0] count:TRI_COUNT];
    VOITriangleList *a = [self.triangulator triangulate];
//    XCTAssertEqualObjects(e, a);
    // The first triangle we find is the second triangle in the expected list
    // This is undoubtedly (but I didn't check) caused by starting with a different seed point
    NSArray *standardTriangles = [[e allTriangles] valueForKey:@"standardize"];
    VOITriangle *check = [[a triangleAt:0] standardize];
    XCTAssertTrue([standardTriangles containsObject:check]);
}

//- (void)testPerformanceExample {
//    [self measureBlock:^{}];
//}

@end
