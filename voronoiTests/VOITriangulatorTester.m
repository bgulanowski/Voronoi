//
//  VOITriangulatorTester.m
//  voronoiTests
//
//  Created by Brent Gulanowski on 2018-10-06.
//  Copyright Â© 2018 Lichen Labs. All rights reserved.
//

#import <XCTest/XCTest.h>

#import "VOIBox.h"
#import "VOIPointList.h"
#import "VOITriangle.h"
#import "VOITriangleList.h"
#import "VOITriangulator.h"

@interface VOITriangulatorTester : XCTestCase
@property VOITriangulator *triangulator;
@end

#define COUNT 9

static VOIPoint t_points[COUNT];

@implementation VOITriangulatorTester

+ (void)setUp {
    [super setUp];
    NSUInteger i = 0;
    // TODO - randomly generate, create triads with old code,
    // convert to triangles, compare to new triangles
    t_points[i++] = vector2(  23.0,  87.0);
    t_points[i++] = vector2( 858.0, 594.0);
    t_points[i++] = vector2(1088.0, 639.0);
    t_points[i++] = vector2( 352.0, 172.0);
    t_points[i++] = vector2(1197.0, 761.0);
    t_points[i++] = vector2(1029.0, 628.0);
    t_points[i++] = vector2( 811.0, 696.0);
    t_points[i++] = vector2(  69.0,  86.0);
    t_points[i++] = vector2( 436.0, 175.0);
    NSAssert(i == COUNT, @"Inconsistent start data");
}

- (void)setUp {
    [super setUp];
    VOIPointList *pl = [[VOIPointList alloc] initWithPoints:t_points count:COUNT];
    self.triangulator = [[VOITriangulator alloc] initWithPointList:pl];
}

- (void)testTriangulate {
#define TRI_COUNT 10
    // This list is generated by the old triangulation code
    // (see -[NSArray(Voronoi) triangulation]), and 9 points
    // from VoronoiDemo Document class, with random seed 88.
    VOIPoint triangles[TRI_COUNT][3] = {
        { t_points[0], t_points[3], t_points[7] },
        { t_points[8], t_points[7], t_points[3] },
        { t_points[6], t_points[3], t_points[0] },
        { t_points[6], t_points[8], t_points[3] },
        { t_points[1], t_points[8], t_points[6] },
        { t_points[5], t_points[1], t_points[6] },
        { t_points[5], t_points[8], t_points[1] },
        { t_points[5], t_points[4], t_points[2] },
        { t_points[2], t_points[8], t_points[5] },
        { t_points[5], t_points[6], t_points[4] }
    };
    VOITriangleList *eList = [[VOITriangleList alloc] initWithPoints:&triangles[0][0] count:TRI_COUNT];
    VOITriangleList *aList = [self.triangulator triangulate];
    
    XCTAssertTrue(self.triangulator.minimized);
    
    // The first triangle we find is the second triangle in the expected list
    // This is undoubtedly (but I didn't check) caused by starting with a different seed point
    NSArray *e = [[[eList allTriangles] valueForKey:@"standardize"] sortedArrayUsingSelector:@selector(compare:)];
    // aList is already standardized
    NSArray *a = [[aList allTriangles] sortedArrayUsingSelector:@selector(compare:)];
    
    XCTAssertEqualObjects(e, a);
}

- (void)testTriangulateRandom16 {
#define pCount 16
    srand(31415);
    VOIBox *boundary = [[VOIBox alloc] initWithOrigin:vector2(-64.0, -64.0) size:vector2(64.0, 64.0)];
    VOIPoint *points = malloc(pCount * sizeof(VOIPoint));
    for (NSUInteger i = 0; i < 16; ++i) {
        points[i] = round([boundary randomPoint]);
    }
    
    VOIPointList *list = [[VOIPointList alloc] initWithPoints:points count:pCount];
    VOITriangulator *triangulator = [[VOITriangulator alloc] initWithPointList:list];
    XCTAssertNoThrow([triangulator triangulate]);
    XCTAssertTrue(triangulator.minimized);
}

//- (void)testPerformanceExample {
//    [self measureBlock:^{}];
//}

@end
